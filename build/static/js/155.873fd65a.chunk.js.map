{"version":3,"file":"static/js/155.873fd65a.chunk.js","mappings":"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","sources":["service/property.service.ts","views/account/properties/edit/EditProperty.tsx"],"sourcesContent":["import { api } from \"./dataService\";\r\nimport { HTTP_METHODS } from 'constant';\r\n\r\nimport { FiltersDataType } from \"types/shared\";\r\n\r\nexport const createProperty = async (formData: any) => {\r\n    const res = await api('/property/create', {\r\n        method: HTTP_METHODS.POST,\r\n        data: JSON.stringify({ formData: formData })\r\n    })\r\n\r\n    return res;\r\n}\r\n\r\n// DELETE PROPERTY\r\n\r\nexport const deleteProperty = async (propertyId: string) => {\r\n    const res = await api('/property/delete', {\r\n        method: HTTP_METHODS.POST,\r\n        data: JSON.stringify({ propertyId: propertyId })\r\n    })\r\n\r\n    return res;\r\n}\r\n\r\n// UPDATE PROPERTY\r\n\r\nexport const updateProperty = async (formData: any, propertyId: string) => {\r\n    const res = await api('/property/update', {\r\n        method: HTTP_METHODS.POST,\r\n        data: JSON.stringify({ formData: formData, propertyId: propertyId })\r\n    })\r\n\r\n    return res;\r\n}\r\n\r\n// PROPERTY IMAGES\r\n\r\nexport const uploadImage = async (formData: FormData) => {\r\n    const res = await api(`/property/upload-image`, {\r\n        method: 'POST',\r\n        data: formData,\r\n        headers: {\r\n            'Content-Type': 'multipart/form-data'\r\n        }\r\n    })\r\n\r\n    return res;\r\n}\r\n\r\nexport const updateImages = async (propertyId: string, images: any) => {\r\n    const res = await api('/property/update-images', {\r\n        method: HTTP_METHODS.POST,\r\n        data: JSON.stringify({\r\n            propertyId: propertyId,\r\n            images: images\r\n        })\r\n    })\r\n\r\n    return res;\r\n}\r\n\r\n// DELETE FLOORPLAN\r\n\r\nexport const deleteFloorplan = async (propertyId: string) => {\r\n    const res = await api(`/property/delete-floorplan`, {\r\n        method: 'POST',\r\n        data: JSON.stringify({ propertyId })\r\n    })\r\n\r\n    return res;\r\n}\r\n\r\n// PROPERTY FLOORPLAN\r\n\r\nexport const uploadFloorplan = async (formData: FormData) => {\r\n    const res = await api(`/property/upload-floorplan`, {\r\n        method: 'POST',\r\n        data: formData,\r\n        headers: {\r\n            'Content-Type': 'multipart/form-data'\r\n        }\r\n    })\r\n\r\n    return res;\r\n}\r\n\r\nexport const updateFloorplan = async (propertyId: string, floorplan: { key: string; name: string; url: string; }) => {\r\n    const res = await api('/property/update-floorplan', {\r\n        method: HTTP_METHODS.POST,\r\n        data: JSON.stringify({\r\n            propertyId: propertyId,\r\n            floorplan: floorplan\r\n        })\r\n    })\r\n\r\n    return res;\r\n}\r\n\r\n// CHANGE FLOORPLAN\r\n\r\nexport const changeFloorplan = async (propertyId: string, floorplan: { key: string; name: string; url: string; }) => {\r\n    const res = await api('/property/change-floorplan', {\r\n        method: HTTP_METHODS.POST,\r\n        data: JSON.stringify({\r\n            propertyId: propertyId,\r\n            floorplan: floorplan\r\n        })\r\n    })\r\n\r\n    return res;\r\n}\r\n\r\n// UPDATE VIDEOS\r\n\r\nexport const updateVideos = async (videos: {\r\n    name: string; url: string; type: string;\r\n}[], propertyId: string) => {\r\n\r\n    const res = await api(`/property/update-videos`, {\r\n        method: 'POST',\r\n        data: JSON.stringify({ videos, propertyId })\r\n    })\r\n\r\n    return res;\r\n}\r\n\r\nexport const fetchListings = async (config: { skip: number; limit: number; }) => {\r\n    const res = await api(`/property/fetch`, {\r\n        method: HTTP_METHODS.POST,\r\n        data: JSON.stringify({ \r\n            skip: config.skip,\r\n            limit: config.limit\r\n         })\r\n    });\r\n\r\n    return res; \r\n}\r\n\r\n// FETCH PROPERTY BY ID\r\n\r\nexport const fetchPropertyById = async (propertyId: string) => {\r\n    const res = await api('/property/fetch-by-id', {\r\n        method: HTTP_METHODS.POST,\r\n        data: JSON.stringify({ propertyId: propertyId })\r\n    })\r\n\r\n    return res;\r\n}\r\n\r\n\r\n// FIND NEARBY LCOATIONS\r\n\r\nexport const findNearbyLocations = async (coordinates: number[], filters: FiltersDataType) => {\r\n    const res = await api('/property/nearby-search', {\r\n        method: HTTP_METHODS.POST,\r\n        data: JSON.stringify({ \r\n            coordinates: coordinates, \r\n            filters: filters\r\n        })\r\n    })\r\n\r\n    return res;\r\n}\r\n\r\n// DELTE IMAGES\r\n\r\nexport const deleteImage = async (propertyId: string, imageId: string) => {\r\n    const res = await api('/property/delete-image', {\r\n        method: HTTP_METHODS.POST,\r\n        data: JSON.stringify({\r\n            propertyId: propertyId,\r\n            imageId: imageId\r\n        })\r\n    })\r\n\r\n    return res;\r\n}\r\n\r\n// UPDATE IMAGES ORDER\r\n\r\nexport const updateImagesOrder = async (propertyId: string, images: any) => {\r\n    const res = await api('/property/update-images-order', {\r\n        method: HTTP_METHODS.POST,\r\n        data: JSON.stringify({\r\n            propertyId: propertyId,\r\n            images: images\r\n        })\r\n    })\r\n\r\n    return res;\r\n}\r\n\r\n\r\n// SAVE VIDEOS\r\n\r\nexport const saveVideos = async (propertyId: string, videos: any) => {\r\n    const res = await api('/property/save-videos', {\r\n        method: HTTP_METHODS.POST,\r\n        data: JSON.stringify({\r\n            propertyId: propertyId,\r\n            videos: videos\r\n        })\r\n    })\r\n\r\n    return res;\r\n}","import { type FC, useState, useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nimport DOMPurify from \"dompurify\";\r\nimport { Loader } from \"components/shared\";\r\nimport { CreatePropertyFrom } from \"components/form\";\r\n\r\nimport { fetchPropertyById } from \"service/property.service\";\r\n\r\nimport { config } from \"../create/config\";\r\n\r\nconst EditProperty: FC = () => {\r\n    const [property, setProperty] = useState<any>(null);\r\n    const { propertyId } = useParams();\r\n\r\n    const getProperty = async () => {\r\n        if (!propertyId) return;\r\n\r\n        try {\r\n            const response = await fetchPropertyById(propertyId);\r\n\r\n            if (response && response.status === 200) {\r\n                const cleanDescription = DOMPurify.sanitize(response.data.property.description);\r\n                \r\n                setProperty({\r\n                    ...response.data.property,\r\n                    description: cleanDescription \r\n                });\r\n            }\r\n        } catch (error) {\r\n            console.error(error);\r\n        }\r\n    }\r\n\r\n    const handleSubmit = (data: any) => {\r\n        console.log(data);\r\n    }\r\n\r\n    useEffect(() => {\r\n        getProperty();\r\n    }, []);\r\n\r\n    if (!property) {\r\n        return <Loader />\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <CreatePropertyFrom \r\n                config={ config }\r\n                initialState={ property }\r\n                onSubmitData={ handleSubmit }\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default EditProperty;"],"names":["createProperty","async","api","method","HTTP_METHODS","POST","data","JSON","stringify","formData","deleteProperty","propertyId","updateProperty","uploadImage","headers","updateImages","images","deleteFloorplan","uploadFloorplan","updateFloorplan","floorplan","changeFloorplan","updateVideos","videos","fetchListings","skip","config","limit","fetchPropertyById","findNearbyLocations","coordinates","filters","deleteImage","imageId","updateImagesOrder","saveVideos","EditProperty","property","setProperty","useState","useParams","useEffect","response","status","cleanDescription","DOMPurify","description","error","console","getProperty","_jsx","children","CreatePropertyFrom","initialState","onSubmitData","log","Loader"],"sourceRoot":""}