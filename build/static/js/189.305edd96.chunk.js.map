{"version":3,"file":"static/js/189.305edd96.chunk.js","mappings":"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","sources":["webpack://client/./src/components/account/FilterDate.module.scss?6ddb","components/account/FilterDate.tsx","service/user.service.ts","webpack://client/./src/views/account/accounts/AccountDetails.module.scss?d4e7","service/activity.service.ts","webpack://client/./src/views/account/accounts/ChangePassword.module.scss?ed11","views/account/accounts/ChangePassword.tsx","views/account/accounts/AccountDetails.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"heading-primary\":\"FilterDate_heading-primary__jj0iZ\",\"filter__container\":\"FilterDate_filter__container__cF3TW\"};","import { type FC } from \"react\";\r\nimport classes from './FilterDate.module.scss';\r\n\r\nimport { useForm, SubmitHandler } from \"react-hook-form\";\r\n\r\nimport { Input, Button } from \"components/shared\";\r\n\r\nconst initialState = {\r\n    from: '',\r\n    to: ''\r\n}\r\n\r\ntype FormProps = {\r\n    from: string;\r\n    to: string;\r\n}\r\n\r\nconst FilterDate: FC<{ onSubmitData: (data: FormProps) => void; isLoading: boolean; }> = ({ onSubmitData, isLoading }) => {\r\n    const {\r\n        register,\r\n        handleSubmit\r\n    } = useForm<FormProps>({ defaultValues: initialState });\r\n\r\n    const onSubmit: SubmitHandler<FormProps> = async (data) => {\r\n        onSubmitData(data);\r\n    }\r\n\r\n    return (\r\n        <div className={ classes.filter }>\r\n            <div className={ classes.filter__container }>\r\n                <form onSubmit={ handleSubmit(onSubmit) }>\r\n                    <Input type=\"date\" label=\"From\" name=\"from\" register={ register } required={ true } />\r\n                    <Input type=\"date\" label=\"To\" name=\"to\" register={ register } required={ true } />\r\n                    <Button mode=\"main\" isLoading={ isLoading }>Filter</Button>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FilterDate;","import { api } from \"./dataService\";\r\nimport { HTTP_METHODS } from 'constant';\r\n\r\n// FETCH ALL USERS\r\n\r\nexport const fetchUsers = async () => {\r\n    const res = await api('/user/fetch-all');\r\n\r\n    return res;\r\n}\r\n\r\n// DELETE ACCOUNT\r\n\r\nexport const deleteAccount = async (accountId: string) => {\r\n    const res = await api('/user/delete', {\r\n        method: HTTP_METHODS.POST,\r\n        data: JSON.stringify({ accountId })\r\n    })\r\n\r\n    return res;\r\n}\r\n\r\n// FETCH USER\r\n\r\nexport const fetchAccount = async (accountId: string) => {\r\n    const res = await api('/user/fetch-by-id', {\r\n        method: HTTP_METHODS.POST,\r\n        data: JSON.stringify({ accountId })\r\n    });\r\n\r\n    return res;\r\n}\r\n\r\n// FETCH USER\r\n\r\nexport const changePassword = async (accountId: string, password: string) => {\r\n    const res = await api('/user/change-password', {\r\n        method: HTTP_METHODS.POST,\r\n        data: JSON.stringify({ accountId, password })\r\n    });\r\n\r\n    return res;\r\n}\r\n\r\n// UPDATE USER\r\n\r\nexport const updateAccount = async (accountId: string, data: any) => {\r\n    const res = await api('/user/update', {\r\n        method: HTTP_METHODS.POST,\r\n        data: JSON.stringify({ accountId, data })\r\n    });\r\n\r\n    return res;\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"heading-primary\":\"AccountDetails_heading-primary__c3P1B\",\"details__container\":\"AccountDetails_details__container__31FMP\",\"details__info\":\"AccountDetails_details__info__V845k\",\"details__header\":\"AccountDetails_details__header__jHQXt\",\"center\":\"AccountDetails_center__oFhzE\",\"small\":\"AccountDetails_small__Ut+OI\",\"medium\":\"AccountDetails_medium__w-MqR\",\"outline\":\"AccountDetails_outline__a0hPf\",\"account__header\":\"AccountDetails_account__header__ZpShf\",\"account__form\":\"AccountDetails_account__form__zfcOU\",\"activity__container\":\"AccountDetails_activity__container__5tz8S\"};","import { api } from \"./dataService\";\r\nimport { HTTP_METHODS } from 'constant';\r\n\r\nexport const fetchUserActivities = async (userId: string) => {\r\n    const res = await api('/activity/fetch', {\r\n        method: HTTP_METHODS.POST,\r\n        data: JSON.stringify({ userId })\r\n    })\r\n\r\n    return res;\r\n}\r\n\r\nexport const fetchUserActivitiesByDate = async (userId: string, from?: string, to?: string) => {\r\n    const res = await api('/activity/fetch-by-date', {\r\n        method: HTTP_METHODS.POST,\r\n        data: JSON.stringify({ userId, from, to })\r\n    })\r\n\r\n    return res;\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"heading-primary\":\"ChangePassword_heading-primary__EhS7a\",\"password\":\"ChangePassword_password__UAl+r\",\"password__form\":\"ChangePassword_password__form__K5W0h\",\"password__success\":\"ChangePassword_password__success__9dbv5\"};","import { type FC, Fragment, useEffect, useState } from \"react\";\r\nimport classes from './ChangePassword.module.scss';\r\n\r\nimport { Input, Button, Component, Title } from \"components/shared\";\r\n\r\nimport { useForm, SubmitHandler, Controller } from \"react-hook-form\";\r\n\r\nimport { passwordType, initialPasswordState } from \"./config\";\r\n\r\nimport { changePassword } from \"service/user.service\";\r\n\r\nimport { waitFor } from \"utils\";\r\n\r\nconst ChangePassword: FC<{ accountId: string; onSave: () => void; }> = ({ accountId, onSave }) => {\r\n    const [successMessage, setSuccessMessage] = useState<string>('');\r\n    const [isLoading, setIsLoading] = useState<boolean>(false);\r\n    \r\n    const {\r\n        control, \r\n        handleSubmit,\r\n        formState: { errors } \r\n    } = useForm<passwordType>({ defaultValues: initialPasswordState });\r\n    \r\n    const onSubmitForm: SubmitHandler<passwordType> = async (data) => {\r\n        setIsLoading(true);\r\n\r\n        try {\r\n            const response = await changePassword(accountId, data.password);\r\n\r\n            if (response && response.status === 200) {\r\n                setSuccessMessage(response.data.message);\r\n                onSave();\r\n            }\r\n        } catch (error) {\r\n            console.error(error);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        waitFor(3000).then(() => {\r\n            setSuccessMessage('');\r\n        })\r\n    }, [successMessage])\r\n\r\n    return (\r\n        <Fragment>\r\n            <Component className={ classes.password }>\r\n                <div className={ classes.password__container }>\r\n                    <Title>Change Password</Title>\r\n                    { successMessage && (\r\n                        <div className={ classes.password__success }>\r\n                            <p> { successMessage } </p>\r\n                        </div>\r\n                    ) }\r\n                    <div className={ classes.password__form }>\r\n                        <form onSubmit={ handleSubmit(onSubmitForm) }>\r\n                            <Controller name=\"password\" control={ control } rules={{ required: 'Password is required' }} render={({ field }) => (\r\n                                <Input type=\"password\" label=\"Password\" {...field} errors={ errors } />\r\n                            )} />\r\n                            <Controller name=\"confirmPassword\" control={ control } rules={{ required: 'Confirm password is required' }} render={({ field }) => (\r\n                                <Input type=\"password\" label=\"Confirm Password\" {...field} errors={ errors } />\r\n                            )} />\r\n                            <Button mode=\"main\" isLoading={ isLoading }>Save</Button>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </Component>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default ChangePassword;","import { type FC, useState, useEffect, Fragment } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport classes from './AccountDetails.module.scss';\r\n\r\nimport { fetchAccount, updateAccount } from \"service/user.service\";\r\nimport { fetchUserActivities, fetchUserActivitiesByDate } from \"service/activity.service\";\r\n\r\nimport ChangePassword from \"./ChangePassword\";\r\nimport { FilterDate } from \"components/account\";\r\nimport { Loader, Acronim, Input, Select, Button, Component, Title } from \"components/shared\";\r\n\r\nimport { useForm, SubmitHandler, Controller } from \"react-hook-form\";\r\n\r\nimport { formDataType, initialState, optionsArray } from \"./config\";\r\n\r\nimport { formatDate } from \"utils\";\r\n\r\nconst AccountDetails: FC = () => {\r\n    const [currentAccount, setCurrentAccount] = useState<any>(null);\r\n    const [activities, setActivities] = useState<any>(null);\r\n    const [dateIsLoading, setDateIsLoading] = useState<boolean>(false);\r\n    const [isLoading, setIsLoading] = useState<boolean>(false);\r\n\r\n    const { accountId } = useParams();\r\n\r\n    const {\r\n        control, \r\n        handleSubmit,\r\n        setValue, \r\n        formState: { errors } \r\n    } = useForm<formDataType>({ defaultValues: initialState });\r\n\r\n    const getCurrentAccount = async () => {\r\n        if (!accountId) return;\r\n\r\n        try {\r\n            const response = await fetchAccount(accountId);\r\n            const activityResponse = await fetchUserActivities(accountId);\r\n\r\n            if (response && response.status === 200) {\r\n                setCurrentAccount(response.data.account);\r\n\r\n                setValue('firstName', response.data.account.firstName);\r\n                setValue('lastName', response.data.account.lastName);\r\n                setValue('email', response.data.account.email);\r\n                setValue('role', response.data.account.role);\r\n            }\r\n\r\n            if (activityResponse && activityResponse.status === 200) {\r\n                setActivities(activityResponse.data.activities);\r\n            }\r\n        } catch (error) {\r\n            console.error(error);\r\n        }\r\n    }\r\n\r\n    const handleFetchActivities = async () => {\r\n        if (!accountId) return;\r\n\r\n        try {\r\n            const activityResponse = await fetchUserActivities(accountId);\r\n\r\n            if (activityResponse && activityResponse.status === 200) {\r\n                setActivities(activityResponse.data.activities);\r\n            }\r\n        } catch (error) {\r\n            console.error(error);\r\n        }\r\n    }\r\n\r\n    const onSubmitBasicForm: SubmitHandler<formDataType> = async (data) => {\r\n        if (!accountId) return;\r\n        setIsLoading(true);\r\n\r\n        try {\r\n            const response = await updateAccount(accountId, data);\r\n\r\n            if (response && response.status === 200) {\r\n                await handleFetchActivities();\r\n            }\r\n        } catch (error) {\r\n            console.error(error);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    }\r\n\r\n    const handleFilterActivity = async (data: { from: string; to: string; }) => {\r\n        if (!accountId) return;\r\n        setDateIsLoading(true);\r\n\r\n        try {\r\n            const activityResponse = await fetchUserActivitiesByDate(accountId, data.from, data.to);\r\n\r\n            if (activityResponse && activityResponse.status === 200) {\r\n                setActivities(activityResponse.data.activities);\r\n            }\r\n        } catch (error) {\r\n            console.error(error);\r\n        } finally {\r\n            setDateIsLoading(false);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        getCurrentAccount();\r\n    }, [])\r\n\r\n    if (!currentAccount || !accountId) {\r\n        return <Loader />\r\n    }\r\n    \r\n    return (\r\n        <Fragment>\r\n            <div className={ classes.details }>\r\n                <div className={ classes.details__header }>\r\n                    <Link to=\"/dashboard/accounts\">Back</Link>\r\n                </div>\r\n                <div className={ classes.details__container }>\r\n                    <div className={ classes.details__info }>\r\n                        <Component className={ classes.account }>\r\n                            <div className={ classes.account__details }>\r\n                                <Title>Basic Information</Title>\r\n                                <div className={ classes.account__header }>\r\n                                    <Acronim name={ currentAccount.fullName } />\r\n                                    <p> { currentAccount.fullName } </p>\r\n                                </div>\r\n                                <div className={ classes.account__form }>\r\n                                    <form onSubmit={ handleSubmit(onSubmitBasicForm) }>\r\n                                        <Controller name=\"firstName\" control={ control } rules={{ required: 'First name is required' }} render={({ field }) => (\r\n                                            <Input label=\"First Name\" {...field} errors={ errors } />\r\n                                        )} />\r\n                                        <Controller name=\"lastName\" control={ control } rules={{ required: 'Last name is required' }} render={({ field }) => (\r\n                                            <Input label=\"Last Name\" {...field} errors={ errors } />\r\n                                        )} />\r\n                                        <Controller name=\"email\" control={ control } rules={{ required: 'Email is required' }} render={({ field }) => (\r\n                                            <Input label=\"Email\" {...field} errors={ errors } />\r\n                                        )} />\r\n                                        <Controller name=\"role\" control={ control } rules={{ required: 'Role is required' }} render={({ field }) => (\r\n                                            <Select {...field} optionsArray={ optionsArray } errors={ errors } defaultValue='Role' />\r\n                                        )} />\r\n                                        <Button type=\"submit\" mode=\"main\" isLoading={ isLoading }>Save</Button>\r\n                                    </form>\r\n                                </div>\r\n                            </div>\r\n                        </Component>\r\n                        <ChangePassword accountId={ accountId } onSave={ handleFetchActivities } />\r\n                    </div>\r\n                    <Component className={ classes.details__activities }>\r\n                        <Title>Activities</Title>\r\n                        <FilterDate onSubmitData={ handleFilterActivity } isLoading={ dateIsLoading } />\r\n                        { (activities && activities.length > 0) && activities.map((item: any) => (\r\n                            <div className={ classes.activity } key={ item._id.toString() }>\r\n                                <div className={ classes.activity__container }>\r\n                                    <p className={ classes.activity__name }> { item.description } </p>\r\n                                    <p className={ classes.activity__date }>Date: <strong> { formatDate(item.timestamp, 'LL') } - { formatDate(item.timestamp, 'LT') } </strong> </p>\r\n                                </div>\r\n                            </div>\r\n                        )) }\r\n                    </Component>\r\n                </div>\r\n            </div>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default AccountDetails;"],"names":["initialState","from","to","_ref","onSubmitData","isLoading","register","handleSubmit","useForm","defaultValues","_jsx","className","classes","filter","children","filter__container","_jsxs","onSubmit","async","data","Input","type","label","name","required","Button","mode","fetchUsers","api","deleteAccount","method","HTTP_METHODS","POST","JSON","stringify","accountId","fetchAccount","changePassword","password","updateAccount","fetchUserActivities","userId","onSave","successMessage","setSuccessMessage","useState","setIsLoading","control","formState","errors","initialPasswordState","useEffect","waitFor","then","Fragment","Component","password__container","Title","password__success","password__form","response","status","message","error","console","Controller","rules","render","_ref2","field","_ref3","AccountDetails","currentAccount","setCurrentAccount","activities","setActivities","dateIsLoading","setDateIsLoading","useParams","setValue","handleFetchActivities","activityResponse","account","firstName","lastName","email","role","getCurrentAccount","details","details__header","Link","details__container","details__info","account__details","account__header","Acronim","fullName","account__form","_ref4","Select","optionsArray","defaultValue","ChangePassword","details__activities","FilterDate","fetchUserActivitiesByDate","length","map","item","activity","activity__container","activity__name","description","activity__date","formatDate","timestamp","_id","toString","Loader"],"sourceRoot":""}