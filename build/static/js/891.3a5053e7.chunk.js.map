{"version":3,"file":"static/js/891.3a5053e7.chunk.js","mappings":"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","sources":["service/property.service.ts","views/account/properties/create/CreateProperty.tsx"],"sourcesContent":["import { api } from \"./dataService\";\r\nimport { HTTP_METHODS } from 'constant';\r\n\r\nimport { FiltersDataType } from \"types/shared\";\r\n\r\nexport const createProperty = async (formData: any) => {\r\n    const res = await api('/property/create', {\r\n        method: HTTP_METHODS.POST,\r\n        data: JSON.stringify({ formData: formData })\r\n    })\r\n\r\n    return res;\r\n}\r\n\r\n// DELETE PROPERTY\r\n\r\nexport const deleteProperty = async (propertyId: string) => {\r\n    const res = await api('/property/delete', {\r\n        method: HTTP_METHODS.POST,\r\n        data: JSON.stringify({ propertyId: propertyId })\r\n    })\r\n\r\n    return res;\r\n}\r\n\r\n// UPDATE PROPERTY\r\n\r\nexport const updateProperty = async (formData: any, propertyId: string) => {\r\n    const res = await api('/property/update', {\r\n        method: HTTP_METHODS.POST,\r\n        data: JSON.stringify({ formData: formData, propertyId: propertyId })\r\n    })\r\n\r\n    return res;\r\n}\r\n\r\n// PROPERTY IMAGES\r\n\r\nexport const uploadImage = async (formData: FormData) => {\r\n    const res = await api(`/property/upload-image`, {\r\n        method: 'POST',\r\n        data: formData,\r\n        headers: {\r\n            'Content-Type': 'multipart/form-data'\r\n        }\r\n    })\r\n\r\n    return res;\r\n}\r\n\r\nexport const updateImages = async (propertyId: string, images: any) => {\r\n    const res = await api('/property/update-images', {\r\n        method: HTTP_METHODS.POST,\r\n        data: JSON.stringify({\r\n            propertyId: propertyId,\r\n            images: images\r\n        })\r\n    })\r\n\r\n    return res;\r\n}\r\n\r\n// DELETE FLOORPLAN\r\n\r\nexport const deleteFloorplan = async (propertyId: string) => {\r\n    const res = await api(`/property/delete-floorplan`, {\r\n        method: 'POST',\r\n        data: JSON.stringify({ propertyId })\r\n    })\r\n\r\n    return res;\r\n}\r\n\r\n// PROPERTY FLOORPLAN\r\n\r\nexport const uploadFloorplan = async (formData: FormData) => {\r\n    const res = await api(`/property/upload-floorplan`, {\r\n        method: 'POST',\r\n        data: formData,\r\n        headers: {\r\n            'Content-Type': 'multipart/form-data'\r\n        }\r\n    })\r\n\r\n    return res;\r\n}\r\n\r\nexport const updateFloorplan = async (propertyId: string, floorplan: { key: string; name: string; url: string; }) => {\r\n    const res = await api('/property/update-floorplan', {\r\n        method: HTTP_METHODS.POST,\r\n        data: JSON.stringify({\r\n            propertyId: propertyId,\r\n            floorplan: floorplan\r\n        })\r\n    })\r\n\r\n    return res;\r\n}\r\n\r\n// CHANGE FLOORPLAN\r\n\r\nexport const changeFloorplan = async (propertyId: string, floorplan: { key: string; name: string; url: string; }) => {\r\n    const res = await api('/property/change-floorplan', {\r\n        method: HTTP_METHODS.POST,\r\n        data: JSON.stringify({\r\n            propertyId: propertyId,\r\n            floorplan: floorplan\r\n        })\r\n    })\r\n\r\n    return res;\r\n}\r\n\r\n// UPDATE VIDEOS\r\n\r\nexport const updateVideos = async (videos: {\r\n    name: string; url: string; type: string;\r\n}[], propertyId: string) => {\r\n\r\n    const res = await api(`/property/update-videos`, {\r\n        method: 'POST',\r\n        data: JSON.stringify({ videos, propertyId })\r\n    })\r\n\r\n    return res;\r\n}\r\n\r\nexport const fetchListings = async (config: { skip: number; limit: number; }) => {\r\n    const res = await api(`/property/fetch`, {\r\n        method: HTTP_METHODS.POST,\r\n        data: JSON.stringify({ \r\n            skip: config.skip,\r\n            limit: config.limit\r\n         })\r\n    });\r\n\r\n    return res; \r\n}\r\n\r\n// FETCH PROPERTY BY ID\r\n\r\nexport const fetchPropertyById = async (propertyId: string) => {\r\n    const res = await api('/property/fetch-by-id', {\r\n        method: HTTP_METHODS.POST,\r\n        data: JSON.stringify({ propertyId: propertyId })\r\n    })\r\n\r\n    return res;\r\n}\r\n\r\n\r\n// FIND NEARBY LCOATIONS\r\n\r\nexport const findNearbyLocations = async (coordinates: number[], filters: FiltersDataType) => {\r\n    const res = await api('/property/nearby-search', {\r\n        method: HTTP_METHODS.POST,\r\n        data: JSON.stringify({ \r\n            coordinates: coordinates, \r\n            filters: filters\r\n        })\r\n    })\r\n\r\n    return res;\r\n}\r\n\r\n// DELTE IMAGES\r\n\r\nexport const deleteImage = async (propertyId: string, imageId: string) => {\r\n    const res = await api('/property/delete-image', {\r\n        method: HTTP_METHODS.POST,\r\n        data: JSON.stringify({\r\n            propertyId: propertyId,\r\n            imageId: imageId\r\n        })\r\n    })\r\n\r\n    return res;\r\n}\r\n\r\n// UPDATE IMAGES ORDER\r\n\r\nexport const updateImagesOrder = async (propertyId: string, images: any) => {\r\n    const res = await api('/property/update-images-order', {\r\n        method: HTTP_METHODS.POST,\r\n        data: JSON.stringify({\r\n            propertyId: propertyId,\r\n            images: images\r\n        })\r\n    })\r\n\r\n    return res;\r\n}\r\n\r\n\r\n// SAVE VIDEOS\r\n\r\nexport const saveVideos = async (propertyId: string, videos: any) => {\r\n    const res = await api('/property/save-videos', {\r\n        method: HTTP_METHODS.POST,\r\n        data: JSON.stringify({\r\n            propertyId: propertyId,\r\n            videos: videos\r\n        })\r\n    })\r\n\r\n    return res;\r\n}","import { type FC, lazy, useState, Fragment } from \"react\";\r\n\r\nimport { createPropertySteps } from \"constant\";\r\n\r\nimport { createProperty } from \"service/property.service\";\r\nimport { waitFor } from \"utils\";\r\n\r\nconst BasicInformation: FC<{ onSubmitData: (data: any) => void }> = lazy(() => import('./BasicInformation'));\r\nconst Branding: FC<{ property: any; onUpdateBranding: (param: any) => void; onSkip: () => void }> = lazy(() => import('./Branding'));\r\nconst CreatedPropertyScreen: FC<{ property: any; onChangeStep: () => void }> = lazy(() => import('./CreatedPropertyScreen'));\r\n\r\nconst CreateProperty: FC = () => {\r\n    const [currentStep, setCurrentStep] = useState<number>(createPropertySteps.basicInformation);\r\n    const [createdProperty, setCreatedProperty] = useState<any>(null);\r\n\r\n    const handleSubmitProperty = async (data: any) => {\r\n        try {\r\n            const response = await createProperty(data);\r\n\r\n            if (response && response.status === 201) {\r\n                setCreatedProperty(response.data.property);\r\n                waitFor(100).then(() => { setCurrentStep(createPropertySteps.branding) });\r\n            }\r\n        } catch (error) {\r\n            console.error(error);\r\n        }\r\n    }\r\n\r\n    const goToConfirmation = (imgResponse: any) => {\r\n        setCreatedProperty((prevData: any) => {\r\n            return {...prevData, images: imgResponse.data.images}\r\n        })\r\n\r\n        setCurrentStep(createPropertySteps.confirmationScreen);\r\n    }\r\n\r\n    const skipBranding = () => {\r\n        setCurrentStep(createPropertySteps.confirmationScreen);\r\n    }\r\n\r\n    const handleChangeStep = () => {\r\n        setCurrentStep(createPropertySteps.basicInformation);\r\n    }\r\n    // createdProperty && \r\n    return (\r\n        <Fragment>\r\n            { currentStep === createPropertySteps.basicInformation && <BasicInformation onSubmitData={ handleSubmitProperty } /> }\r\n            { (createdProperty && currentStep === createPropertySteps.branding) && <Branding property={ createdProperty } onSkip={ skipBranding } onUpdateBranding={ goToConfirmation } /> }\r\n            { (createdProperty && currentStep === createPropertySteps.confirmationScreen) && <CreatedPropertyScreen onChangeStep={ handleChangeStep } property={ createdProperty } /> }\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default CreateProperty;"],"names":["createProperty","async","api","method","HTTP_METHODS","POST","data","JSON","stringify","formData","deleteProperty","propertyId","updateProperty","uploadImage","headers","updateImages","images","deleteFloorplan","uploadFloorplan","updateFloorplan","floorplan","changeFloorplan","updateVideos","videos","fetchListings","skip","config","limit","fetchPropertyById","findNearbyLocations","coordinates","filters","deleteImage","imageId","updateImagesOrder","saveVideos","BasicInformation","lazy","Branding","CreatedPropertyScreen","CreateProperty","currentStep","setCurrentStep","useState","createPropertySteps","basicInformation","createdProperty","setCreatedProperty","_jsxs","Fragment","children","_jsx","onSubmitData","response","status","property","waitFor","then","branding","error","console","onSkip","skipBranding","confirmationScreen","onUpdateBranding","imgResponse","prevData","onChangeStep","handleChangeStep"],"sourceRoot":""}