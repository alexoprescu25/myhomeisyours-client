{"version":3,"file":"static/js/958.193d0d91.chunk.js","mappings":"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","sources":["service/user.service.ts","webpack://client/./src/views/account/accounts/Accounts.module.scss?5a9d","views/account/accounts/Accounts.tsx"],"sourcesContent":["import { api } from \"./dataService\";\r\nimport { HTTP_METHODS } from 'constant';\r\n\r\n// FETCH ALL USERS\r\n\r\nexport const fetchUsers = async () => {\r\n    const res = await api('/user/fetch-all');\r\n\r\n    return res;\r\n}\r\n\r\n// DELETE ACCOUNT\r\n\r\nexport const deleteAccount = async (accountId: string) => {\r\n    const res = await api('/user/delete', {\r\n        method: HTTP_METHODS.POST,\r\n        data: JSON.stringify({ accountId })\r\n    })\r\n\r\n    return res;\r\n}\r\n\r\n// FETCH USER\r\n\r\nexport const fetchAccount = async (accountId: string) => {\r\n    const res = await api('/user/fetch-by-id', {\r\n        method: HTTP_METHODS.POST,\r\n        data: JSON.stringify({ accountId })\r\n    });\r\n\r\n    return res;\r\n}\r\n\r\n// FETCH USER\r\n\r\nexport const changePassword = async (accountId: string, password: string) => {\r\n    const res = await api('/user/change-password', {\r\n        method: HTTP_METHODS.POST,\r\n        data: JSON.stringify({ accountId, password })\r\n    });\r\n\r\n    return res;\r\n}\r\n\r\n// UPDATE USER\r\n\r\nexport const updateAccount = async (accountId: string, data: any) => {\r\n    const res = await api('/user/update', {\r\n        method: HTTP_METHODS.POST,\r\n        data: JSON.stringify({ accountId, data })\r\n    });\r\n\r\n    return res;\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"accounts__delete\":\"Accounts_accounts__delete__jzHvn\",\"heading-primary\":\"Accounts_heading-primary__mnhGs\",\"accounts\":\"Accounts_accounts__qFp63\",\"accounts__link\":\"Accounts_accounts__link__idR17\",\"accounts__name\":\"Accounts_accounts__name__uLcx0\",\"delete__container\":\"Accounts_delete__container__1CFlg\",\"delete__image\":\"Accounts_delete__image__dZoI+\",\"delete__actions\":\"Accounts_delete__actions__klIz2\",\"delete__heading\":\"Accounts_delete__heading__8UDFd\"};","import { type FC, useState, useEffect, Fragment } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport classes from './Accounts.module.scss';\r\n\r\nimport { \r\n    Component,\r\n    Table,\r\n    TableHead, \r\n    TableBody,\r\n    Loader,\r\n    ReactModal,\r\n    Button,\r\n    Acronim\r\n} from \"components/shared\";\r\nimport CreateAccount from \"./CreateAccount\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTrash } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport { fetchUsers, deleteAccount } from \"service/user.service\";\r\nimport { handleAPIError, formatDate, waitFor } from \"utils\";\r\n\r\nimport { EnhancedSubject } from \"types/shared\";\r\n\r\nconst Accounts: FC = () => {\r\n    const [deleteModalIsOpen, setDeleteModalStatus] = useState<boolean>(false);\r\n    const [isOpen, setIsOpen] = useState<boolean>(false);\r\n    const [users, setUsers] = useState<EnhancedSubject[] | null>(null);\r\n    const [isLoading, setIsLoading] = useState<boolean>(false);\r\n\r\n    const [selectedUser, setSelectedUser] = useState<{ id: string; name: string; } | null>(null);\r\n\r\n    const getUsers = async () => {\r\n        try {   \r\n            const response = await fetchUsers();\r\n            \r\n            if (response && response.status === 200) {\r\n                setUsers(response.data.users);\r\n            }\r\n        } catch (error) {\r\n            handleAPIError(error, true);\r\n        }\r\n    }\r\n\r\n    const handleCreateAccount = async () => {\r\n        await getUsers();\r\n        setIsOpen(false);\r\n    }\r\n\r\n    const handleDeleteDisclaimer = (id: string, name: string) => {\r\n        setSelectedUser({ id, name });\r\n        waitFor(100).then(() => { setDeleteModalStatus(true) });\r\n    }\r\n\r\n    const handleClose = () => {\r\n        setSelectedUser(null); \r\n        setDeleteModalStatus(false);\r\n    }\r\n\r\n    const handleDelete = async () => {\r\n        setIsLoading(true);\r\n        if (!selectedUser) return;\r\n\r\n        try {\r\n            const response = await deleteAccount(selectedUser.id);\r\n\r\n            if (response && response.status === 200) {\r\n                await getUsers();\r\n                await waitFor(100);\r\n                \r\n                handleClose();\r\n            }\r\n        } catch (error) {\r\n            console.error(error);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    }\r\n    \r\n    useEffect(() => {\r\n        getUsers();\r\n    }, [])\r\n\r\n    if (!users) {\r\n        return <Loader />\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <ReactModal \r\n                isOpen={ isOpen }\r\n                onClose={ () => setIsOpen(false) }\r\n            >\r\n                <CreateAccount onSubmit={ handleCreateAccount } />\r\n            </ReactModal>\r\n\r\n            <ReactModal\r\n                isOpen={ deleteModalIsOpen }\r\n                onClose={ handleClose }\r\n            >       \r\n                <div className={ classes.delete }>\r\n                    <div className={ classes.delete__container }>\r\n                        <div className={ classes.delete__image }>\r\n                            <img src=\"/images/exclamation.png\" alt=\"Exclamation\" />\r\n                        </div>\r\n                        <div className={ classes.delete__content }>\r\n                            <p className={ classes.delete__heading }>Delete User</p>\r\n                            <p className={ classes.delete__text }>Are you sure you want to delete user { selectedUser && selectedUser.name }? </p>\r\n                        </div>\r\n                        <div className={ classes.delete__actions }>\r\n                            <Button mode=\"slate-grey\" onClick={ handleClose }>Cancel</Button>\r\n                            <Button mode=\"danger\" onClick={ handleDelete } isLoading={ isLoading }>Delete</Button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </ReactModal>\r\n\r\n            <Component className={ classes.accounts }>\r\n                <div className={ classes.accounts__container }>\r\n                    <Table title=\"Users\" onClick={ () => setIsOpen(true) }>\r\n                        <TableHead>\r\n                            <tr>\r\n                                <th>Name</th>\r\n                                <th>Role</th>\r\n                                <th>Created By</th>\r\n                                <th>Created At</th>\r\n                                <th>Updated At</th>\r\n                                <th>Actions</th>\r\n                            </tr>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            { users.map((user: any) => (\r\n                                <tr key={ user._id.toString() }>\r\n                                    <td> \r\n                                        <span className={ classes.accounts__name }>\r\n                                            <Acronim name={ user.fullName } width={40} />\r\n                                            <Link className={ classes.accounts__link } to={ `/dashboard/accounts/${user._id.toString()}` }>\r\n                                                { user.fullName }\r\n                                            </Link>\r\n                                        </span>\r\n                                    </td>\r\n                                    <td> { user.role } </td>\r\n                                    <td> \r\n                                        { \r\n                                            (user.createdBy && user.createdBy.fullName) ? (\r\n                                                <Link className={ classes.accounts__link } to={ `/dashboard/accounts/${user.createdBy._id.toString()}` }> { user.createdBy.fullName } </Link>  \r\n                                            ) : (\r\n                                                <p>N/A</p>\r\n                                            ) \r\n                                        }\r\n                                    </td>\r\n                                    <td> { formatDate(user.createdAt, 'LL') } - { formatDate(user.createdAt, 'LT') }  </td>\r\n                                    <td> { formatDate(user.updatedAt, 'LL') } - { formatDate(user.updatedAt, 'LT') }  </td>\r\n                                    <td>\r\n                                        <button className={ classes.accounts__delete } onClick={ () => { handleDeleteDisclaimer(user._id, user.fullName) } }>\r\n                                            <FontAwesomeIcon icon={ faTrash } />\r\n                                        </button>\r\n                                    </td>\r\n                                </tr>\r\n                            )) }\r\n                        </TableBody>\r\n                    </Table>\r\n                </div>\r\n            </Component>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default Accounts;"],"names":["fetchUsers","async","api","deleteAccount","method","HTTP_METHODS","POST","data","JSON","stringify","accountId","fetchAccount","changePassword","password","updateAccount","Accounts","deleteModalIsOpen","setDeleteModalStatus","useState","isOpen","setIsOpen","users","setUsers","isLoading","setIsLoading","selectedUser","setSelectedUser","getUsers","response","status","error","handleAPIError","handleClose","useEffect","_jsxs","Fragment","children","_jsx","ReactModal","onClose","CreateAccount","onSubmit","className","classes","delete","delete__container","delete__image","src","alt","delete__content","delete__heading","delete__text","name","delete__actions","Button","mode","onClick","id","waitFor","console","Component","accounts","accounts__container","Table","title","TableHead","TableBody","map","user","accounts__name","Acronim","fullName","width","Link","accounts__link","to","concat","_id","toString","role","createdBy","formatDate","createdAt","updatedAt","accounts__delete","handleDeleteDisclaimer","then","FontAwesomeIcon","icon","faTrash","Loader"],"sourceRoot":""}